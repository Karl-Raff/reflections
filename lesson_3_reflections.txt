Q1: When would you want to use a remote repository instead of keeping all your work local?

A1: Some examples of when you might use a remote repositry are:
    When you want to collaborate with multiple developers.
    When you want to share your work across multiple machines.
    When you want to make your work publicly available.

Q2: Why might you want to always pull changes manually rather than having Git automatically
    stay up-to-date with your remote repository?

A2: Always manually pulling changes allows you to control when you're local repository is
    changed, it also allows you to control what branches of the remote repo you want to
    pull from.

Q3: Describe the differences between forks, clones, and branches. When would you use one
    instead of another?

A3: Forks are copys of another persons repository on GitHub, forking creates a copy of the forked
    repo on your own GitHub account, while keeping a reference to the forked repo. This is mainly
    used when you wish to make use/alter another persons repository without making changes to their
    personal copy of it.
    Clones create a copy of a repository on your local machine. The target can be either another
    local repositry or, more commonly, a remote repository. This is mainly used to get a repository
    from a remote machine to your local machine.
    Branching creates a copy of of a commit within a repository, which then forms the tip of a new
    branch. This branch can then be altered and commited to without inpacting the original branch.
    This is often used to make, sometimes experimental, changes to the committed files without impacting
    the original branch.

Q4: What is the benefit of having a copy of the last known state of the remote stored locally?

A4: Having a copy of the last known state of the remote stored locally allows you to work offline
    more efficiently and allows you to quickly check differences between your local repo and the remote.

Q5: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

A5: Collaborating without Git or GitHub, or another form of version control, would be much more difficult.
    Files would have to be shared over email or FTP and there would be no history of files to review.
    The only difficulty with collaborating using git and GitHub is that there is a learning curve to it's use.