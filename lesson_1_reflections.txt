Q1: How did viewing a diff between two versions of a file help you see
    the bug that was introduced?

A1: It helped me by isolating only the parts of the text file that had
    changed, reducing the amount of text I had to search through.

Q2: How could having easy access to the entire history of a file make
    you a more efficient programmer in the long term?

A2: It would allow you not only to quickly isolated bugs and changes
    made tot he file, but also allow you to reflect on the changes
    made over time.

Q3: What do you think are the pros and cons of manually choosing when
    to create a commit, like you do in Git, vs having versions
    automatically saved, like Google Docs does?

A3: Pros: It allows a user to choose a logical time to create the
    commit.
    The commits can each be meaningful and logical changes.
    Cons: It requires the user to remember to commit changes, if they
    forget then there is a risk their work will be lost.

Q4: Why do you think some version control systems, like Git, allow 
    saving multiple files in one commit, while others, like Google
    Docs, treat each file seperately?

A4: Some version control systems, such as Google Docs, are made to
    cater for cases where individual files are independant from one
    another, and changes made to one will not impact any of the others.
    Git, on the other hand, is made to cater for code bases, where it is
    almost guaranteed that most files will have dependancies on one another.

Q5: How can you use the commands 'git log' and 'git diff' to view the
    history of files?

A5: You can use the command 'git log' to browse through the commit history
    of any repo, finding information on their time of submission, autors
    and the messages associated with them.
    You can use 'git diff' to compare any two commits with each other,
    outlining the differences between the two.

Q6: How might using version control make you more confident to make
    changes that could break something?

A6: Version control enables you to revert to any previous commit with
    minimal effort. So even if you make a change that breaks the program
    you're working with, it's easy to revert to a working version.

Q7: Now that you have your workspace set up, what do you want to try
    using Git for?

A7: I would like to try using git to learn proper version control and
    branching techniques.