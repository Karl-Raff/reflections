Q1: What happens when you initialize a repository? Why do you need to do it?

A1: When you initialize a git repository, it creates a .git sub-directory
    which stores all of the git metadata required for version control.
    This is required to enable git to track and operate on commits.

Q2: How is the staging area different from the working directory and
    the repository? What value do you think it offers?

A2: The staging area is different in that it is a place to add only the
    files that you wish to be added to the commit. Having this area allows
    for a much greater level of control over what is committed and what isn't.

Q3: How can you use the staging area to mkae sure that you have one commit per
    logical change?

A3: You can use the staging area to ensure that you have one commit per logical
    change by adding to it only the files who's changes are associated with that
    logical change. Leaving any others uncommitted in the working directory.

Q4: What are some situations when branches would be helpful in keeping your
    history organised? How would branches help?

A4: Branches are helpful when you need to keep different versions of your code
    seperated. An example of this would be if you were trying to implement an
    experimental feature.

Q5: How do diagrams help you visualize the branch structure?

A5: Diagrams are helpful in visualizing the branch structure because it allows
    you to see, at a glance, the history of a repo, including when and where it's
    branches diverged and when and where they were merged.